<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  width="100%"
					  height="100%"
					  backgroundColor="0x000000"
					  backgroundAlpha="0.75">

	<s:layout>
		<s:VerticalLayout paddingBottom="30" paddingLeft="30" paddingRight="30" paddingTop="30" verticalAlign="middle"/>
	</s:layout>


	<fx:Script>

		<![CDATA[
			import model.DataModel;

			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.utils.StringUtil;

			private var _microphoneChanged:Boolean=false;
			private var _microphoneSoundTestPassed:Boolean=false;

			private var _cameraChanged:Boolean=false;

			private var _devicesAllowed:Boolean=false;

			public static var microphoneFound:Boolean=false;
			public static var cameraFound:Boolean=false;

			public static var useMicAndCamera:Boolean=false;


			public static function cameraReady():Boolean
			{
				return (DataModel.getInstance().microphone && !DataModel.getInstance().microphone.muted);
			}

			public static function microphoneReady():Boolean
			{
				return (DataModel.getInstance().camera && !DataModel.getInstance().camera.muted);
			}

			private function creationCompleteHandler():void
			{
				//initDevices();
			}

			public function initDevices():void
			{
				if (devicesAdministrativelyProhibited())
				{
					micCamViewStack.selectedChild=adminErrorNavContent;
					trace("Error: User has no rigths to access devices.");
				}
				else
				{
					if (microphoneAvailable())
					{
						microphoneFound=true;
						var microphone:Microphone=Microphone.getMicrophone();
						if (!DataModel.getInstance().microphone)
						{
							_microphoneChanged=true;
							DataModel.getInstance().microphone=microphone;
						}
						else if (DataModel.getInstance().microphone != microphone)
						{
							_microphoneChanged=true;
							DataModel.getInstance().microphone=microphone;
							trace("Mic device changed.");
						}
						if (DataModel.getInstance().microphone.muted)
						{
							micCamViewStack.selectedChild=privacyNoticeNavContent;
							_devicesAllowed=false;
							DataModel.getInstance().microphone.addEventListener(StatusEvent.STATUS, microphonePrivacyStatus);
						}
						else
						{
							_devicesAllowed=true;
						}

						if (useMicAndCamera)
						{
							if (cameraAvailable())
							{
								cameraFound=true;
								var camera:Camera=Camera.getCamera();
								if (!DataModel.getInstance().camera)
								{
									_cameraChanged=true;
									DataModel.getInstance().camera=camera;
								}
								else if (DataModel.getInstance().camera != camera)
								{
									_cameraChanged=true;
									DataModel.getInstance().camera=camera;

									trace("Camera device changed.");
								}
								if (DataModel.getInstance().camera.muted)
								{
									micCamViewStack.selectedChild=privacyNoticeNavContent;
									_devicesAllowed=false;
									DataModel.getInstance().camera.addEventListener(StatusEvent.STATUS, cameraPrivacyStatus);
								}
								else
								{
									_devicesAllowed=true;
								}
							}
							else
							{
								cameraFound=false;
								micCamViewStack.selectedChild=cameraNotFoundErrorNavContent;
								trace("Error: No camera was detected.");
							}
						}
					}
					else
					{
						microphoneFound=false;
						micCamViewStack.selectedChild=micNotFoundErrorNavContent;
						trace("Error: No mic was detected.");
					}
				}
				if (_devicesAllowed)
				{
					DataModel.getInstance().micCamAllowed=_devicesAllowed;
					if (useMicAndCamera)
					{
						if (microphoneFound && cameraFound)
							cancelButtonClickHandler(null);
					}
					else
					{
						if (microphoneFound)
							cancelButtonClickHandler(null);
					}
				}
			}

			private function devicesAdministrativelyProhibited():Boolean
			{
				return (Capabilities.avHardwareDisable);
			}

			private function showPrivacySettings():void
			{
				Security.showSettings(SecurityPanel.PRIVACY);
			}

			public function cameraAvailable():Boolean
			{
				return (Camera.names.length > 0);
			}

			// Will always return true since Flash identifies the system's dummy audio input as a microphone
			public function microphoneAvailable():Boolean
			{
				return (Microphone.names.length > 0);
			}

			private function microphonePrivacyStatus(event:StatusEvent):void
			{
				if (event.code == "Microphone.Muted")
				{
					_devicesAllowed=false;
					privacyRecButton.label=resourceManager.getString('myResources', 'BUTTON_SHOW_PRIVACY_SETTINGS') ? resourceManager.getString('myResources', 'BUTTON_SHOW_PRIVACY_SETTINGS') : 'Show privacy settings';
				}
				if (event.code == "Microphone.Unmuted")
				{
					_devicesAllowed=true;
					privacyRecButton.label=resourceManager.getString('myResources', 'BUTTON_RECORD');
				}
			}

			private function cameraPrivacyStatus(event:StatusEvent):void
			{
				if (event.code == "Camera.Muted")
				{
					_devicesAllowed=false;
					privacyRecButton.label=resourceManager.getString('myResources', 'BUTTON_SHOW_PRIVACY_SETTINGS') ? resourceManager.getString('myResources', 'BUTTON_SHOW_PRIVACY_SETTINGS') : 'Show privacy settings';
				}
				if (event.code == "Camera.Unmuted")
				{
					_devicesAllowed=true;
					privacyRecButton.label=resourceManager.getString('myResources', 'BUTTON_RECORD');
				}
			}

			private function cancelButtonClickHandler(event:Event):void
			{
				//PopUpManager.removePopUp(this);
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			private function okButtonClickHandler(event:Event):void
			{
				if (!_devicesAllowed)
					showPrivacySettings();
				else
				{
					DataModel.getInstance().micCamAllowed=_devicesAllowed;
					cancelButtonClickHandler(null);
				}
			}
		]]>
	</fx:Script>

	<s:Label text="{resourceManager.getString('myResources','TITLE_PRIVACY_SETTINGS').toUpperCase()}"
			 fontSize="18"
			 fontWeight="bold"
			 color="0xffffff"/>
	<s:BorderContainer backgroundColor="0xffffff"
					   backgroundAlpha="1.0"
					   borderWeight="1"
					   borderColor="0xa7a7a7"
					   width="100%"
					   height="80%">
		
		<s:BitmapImage source="@Embed('/resources/images/popup_bgr_unlock.png')"
					   right="0"
					   top="0"/>

		<s:VGroup verticalAlign="middle"
				  paddingBottom="20"
				  paddingLeft="20"
				  paddingRight="20"
				  paddingTop="20"
				  height="100%"
				  width="100%">


			

			<mx:ViewStack id="micCamViewStack"
						  width="100%"
						  height="100%"
						  creationPolicy="all">

				<s:NavigatorContent id="micNotFoundErrorNavContent">
					<s:VGroup id="micNotFoundError"
							  width="100%"
							  height="100%"
							  verticalAlign="middle">
						<s:HGroup>
							<mx:Text width="100%"
									 text="{resourceManager.getString('myResources','TEXT_MIC_NOT_FOUND')}"/>
							<mx:Image source="resources/images/privacy_micError.png"/>
						</s:HGroup>
						<s:HGroup>
							<s:Button id="micNotFoundErrorRetryButton"
									  label="{resourceManager.getString('myResources','BUTTON_RETRY')}"
									  click="initDevices()"
									  buttonMode="true"/>

							<s:Button id="micNotFoundErrorCancelButton"
									  label="{resourceManager.getString('myResources','BUTTON_CANCEL')}"
									  click="cancelButtonClickHandler(event)"
									  buttonMode="true"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>

				<s:NavigatorContent id="cameraNotFoundErrorNavContent">
					<s:VGroup id="cameraNotFoundError"
							  width="100%"
							  height="100%"
							  verticalAlign="middle">
						<s:HGroup width="100%"
								  verticalAlign="middle">
							<mx:Text width="100%"
									 text="{resourceManager.getString('myResources','TEXT_CAMERA_NOT_FOUND')}"/>
							<mx:Image source="resources/images/privacy_webcamError.png"/>
						</s:HGroup>
						<s:HGroup>
							<s:Button id="camNotFoundErrorRetryButton"
									  label="{resourceManager.getString('myResources','BUTTON_RETRY')}"
									  click="initDevices()"
									  buttonMode="true"/>
							<s:Button id="camNotFoundErrorCancelButton"
									  label="{resourceManager.getString('myResources','BUTTON_CANCEL')}"
									  click="cancelButtonClickHandler(event)"
									  buttonMode="true"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>

				<s:NavigatorContent id="adminErrorNavContent">
					<s:VGroup id="adminError"
							  width="100%"
							  height="100%"
							  verticalAlign="middle">
						<mx:Text width="100%"
								 text="{resourceManager.getString('myResources','TEXT_ADMINISTRATIVELY_DISABLED')}"/>
						<s:Button id="adminErrorButton"
								  label="{resourceManager.getString('myResources','BUTTON_OK')}"
								  click="cancelButtonClickHandler(event)"
								  buttonMode="true"/>
					</s:VGroup>
				</s:NavigatorContent>

				<s:NavigatorContent id="privacyNoticeNavContent">
					<s:VGroup id="privacyNotice"
							  width="100%"
							  height="100%"
							  verticalAlign="middle">
						<s:HGroup width="100%"
								  height="100%"
								  verticalAlign="middle">
							<mx:Text width="100%"
									 text="{resourceManager.getString('myResources','TEXT_PRIVACY_RIGHTS_EXPLAIN')}"/>
							<mx:Image source="resources/images/privacy_settings.png"
									  width="160"
									  height="102"/>
						</s:HGroup>
						<s:HGroup width="100%"
								  horizontalAlign="left"
								  verticalAlign="bottom"
								  paddingTop="8">
							<s:Button id="privacyRecButton"
									  label="{ resourceManager.getString('myResources','BUTTON_SHOW_PRIVACY_SETTINGS') ? resourceManager.getString('myResources','BUTTON_SHOW_PRIVACY_SETTINGS') : 'Show privacy settings' }"
									  click="okButtonClickHandler(event)"
									  styleName="bigBlueButton"
									  buttonMode="true"/>
							<s:Button id="privacyCancelButton"
									  label="{resourceManager.getString('myResources','BUTTON_CANCEL')}"
									  click="cancelButtonClickHandler(event)"
									  styleName="bigBlueButton"
									  buttonMode="true"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>

				<s:NavigatorContent id="micSoundTestNavContent">
					<s:VGroup id="micSoundTest"
							  width="100%"
							  height="100%"
							  verticalAlign="middle">
						<mx:Text text="{resourceManager.getString('myResources','TEXT_MIC_TEST_EXPLAIN')}"/>
					</s:VGroup>
				</s:NavigatorContent>

			</mx:ViewStack>
		</s:VGroup>

	</s:BorderContainer>

</s:SkinnableContainer>
